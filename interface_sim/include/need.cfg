#!/usr/bin/env python
PACKAGE = "need_publisher"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

header_frame_id_enum = gen.enum(
    [
		gen.const("fabo",      str_t, "fabo", ""),
		gen.const("others",      str_t, "others", ""),
	], 
	"An enum to set header_frame_id"
)

hehavior_name_enum = gen.enum(
    [
		gen.const("Wander", str_t, "Wander", ""),
        gen.const("WarmGreet", str_t, "WarmGreet", ""),
		gen.const("RespectGreet", str_t, "RespectGreet", ""),
		gen.const("Answer", str_t, "Answer", ""),                  
		gen.const("MeasureTemperature", str_t, "MeasureTemperature", "") ,
		gen.const("TellTemparetureResult", str_t, "TellTemparetureResult", "") ,
		gen.const("TellToWait", str_t, "TellToWait", ""),
		gen.const("StopStranger", str_t, "StopStranger", ""),
		gen.const("ParentsValidation", str_t, "ParentsValidation", ""),
		gen.const("KeepOrder", str_t, "KeepOrder", "")
	], 
	"An enum to set hehavior_name"
)

scene_enum = gen.enum([  	gen.const("school",      str_t, "school", ""),                      
							gen.const("hospital",      str_t, "hospital", ""),                                          
					        gen.const("family", str_t, "family", "")
							], 
					   "An enum to set attitude")

person_name_enum = gen.enum([    
							gen.const("Teacher_Li",      str_t, "Teacher_Li", ""),
							# gen.const("Hong",      str_t, "Hong", ""),
							gen.const("Ming",      str_t, "Ming", ""),                      
					        # gen.const("Gang",     str_t, "Gang", ""),                      
					        # gen.const("Dad_of_Hong",      str_t, "Dad_of_Hong", ""),                      
					        gen.const("Dad_of_Ming",      str_t, "Dad_of_Ming", ""),
							# gen.const("Dad_of_Gang",      str_t, "Dad_of_Gang", ""),                					                              
					        # gen.const("Headmaster",      str_t, "Headmaster", "") ,	
							gen.const("Stranger_",      str_t, "Stranger", "")
							], 					
					   "An enum to set person_name")
IDtype_enum = gen.enum([    gen.const("Teacher",      str_t, "Teacher", ""),                      
					        gen.const("Student",     str_t, "Student", ""),                      
					        gen.const("Parent",      str_t, "Parent", ""), 
							gen.const("Stranger",      str_t, "Stranger", "")
							],
							"An enum to set person ID")

rob_emotion_enum = gen.enum([    gen.const("Joy",      str_t, "Joy", ""),                      
					        gen.const("Trust",     str_t, "Trust", ""),                      
					        gen.const("Suprise",      str_t, "Suprise", ""),
							gen.const("Sadness", str_t, "Sadness", ""),                      
					        gen.const("Anger", str_t, "Anger", ""),
							gen.const("Fear", str_t, "Fear", ""),
							gen.const("Disgust", str_t, "Disgust", ""),
							gen.const("Boring", str_t, "Boring", ""),
							gen.const("Calm", str_t, "Calm", "")
							], 
					   "An enum to set rob_emotion")
emotion_enum = gen.enum([    gen.const("Happy",      str_t, "Happy", ""),                      
					        gen.const("Sad",     str_t, "Sad", ""),                      
					        gen.const("Angry",      str_t, "Angry", ""),                      
					        gen.const("BorinG", str_t, "Boring", ""),
							gen.const("None", str_t, "None", "")
							], 
					   "An enum to set emotion")
attitude_enum = gen.enum([  gen.const("enthusiastic",      str_t, "enthusiastic", ""),                      
							gen.const("respectful",      str_t, "respectful", ""),                       
					        gen.const("serious", str_t, "serious", "")  ,                       
					        gen.const("disgust", str_t, "disgust", "")
							], 
					   "An enum to set attitude")

gen.add("publish", bool_t, 0, "switch", False)

# need
# gen.add("need_time", double_t, 0, "need_time", 0.0000, 0, 1000000000000);
gen.add("need_name", str_t, 0, "need_name", "Wander",edit_method=hehavior_name_enum)
gen.add("need_scene", str_t, 0, "need_scene", "school",edit_method=scene_enum)
gen.add("need_person_name", str_t, 0, "need_person_name", "Teacher_Li",edit_method=person_name_enum)
gen.add("need_IDtype", str_t, 0, "need_IDtype", "Teacher",edit_method=IDtype_enum)
gen.add("need_target_angle", double_t, 0, "need_target_angle", 0, -180, 180)
gen.add("need_target_distance", double_t, 0, "need_target_distance", 1, 0, 30)
gen.add("need_rob_emotion", str_t, 0, "need_rob_emotion", "Joy",edit_method=rob_emotion_enum);
gen.add("need_rob_emotion_intensity", int_t, 0, "need_rob_emotion_intensity", 1, 1, 3) 
gen.add("need_person_emotion", str_t, 0, "need_person_emotion", "Happy",edit_method=emotion_enum)
gen.add("need_weight", double_t, 0, "need_weoght", 0.5, 0, 1.0)
gen.add("need_speech", str_t, 0, "need_speech", "Hello!!")# string speech_
gen.add("need_qt_order", int_t, 0, "need_qt_order", 1, 0, 100) 
gen.add("need_satisfy_value", int_t, 0, "need_satisfy_value", 1, 0, 3) 
gen.add("need_attitude", str_t, 0, "need_attitude", "enthusiastic",edit_method=attitude_enum)
gen.add("need_move_speed", double_t, 0, "need_move_speed", 1, 0, 2)# float64 move_speed 
gen.add("need_distance", double_t, 0, "need_distance", 1, 0, 2)# float64 distance 
gen.add("need_voice_speed", double_t, 0, "need_voice_speed", 1, 0, 2)# float64 voice_speed 

exit(gen.generate(PACKAGE, "need_publisher", "need_publisher"))
